/**
 * Examples.
 * 
 * To execute these, prepare your localhost.
 * - start sshd
 * - generate key pair (ssh-keygen -t rsa)
 * - add your pubic key to authorized_keys
 * - make sure that you can log in without password
 * 
 * If gradle is invoked with <code>-DuseRelease</code>,
 * released JAR in the Maven central repository will be used.
 * 
 */
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		if (System.properties.useRelease) {
			classpath 'org.hidetake:gradle-ssh-plugin:0.1.3'
		} else {
			classpath files('../build/libs/gradle-ssh-plugin-0.1.3.jar')
			classpath 'com.jcraft:jsch:0.1.48'
		}
	}
}

apply plugin: 'ssh'
apply plugin: 'project-report'

ssh {
	config(StrictHostKeyChecking: 'no')
}

remotes {
	localhost {
		role 'webServers'
		host = 'localhost'
		user = System.properties['user.name']
		identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	}
	myhost {
		role 'webServers'
		host = '127.0.0.1'
		user = System.properties['user.name']
		identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	}
}

task executeSingle {
	description 'describes executing commands on a host'
	doLast {
		ssh(remotes.localhost) {
			execute "echo ${remote.user}@${remote.host}:${remote.port}"
			execute 'env'
		}
	}
}

task executeOnSeveral {
	description 'describes executing on several hosts'
	doLast {
		ssh(remotes.role('webServers')) {
			execute 'env'
		}
	}
}

task executeParallel {
	description 'describes executing commands concurrently on a host'
	doLast {
		parallelssh(remotes.localhost) {
			(1..5).each { i ->
				execute "sleep ${i} && echo -n ${i}- && date"
			}
		}
	}
}

task executeParallelOnSeveral {
	description 'describes executing commands concurrently on several hosts'
	doLast {
		parallelssh {
			host(remotes.localhost) {
				(1..5).each { i ->
					execute "sleep ${i} && echo -n ${i}- && date"
				}
			}
			host(remotes.myhost) {
				execute 'sar 1 5'
			}
		}
	}
}

task executeSudo {
	description 'describes sudo execution'
	doLast {
		ssh(remotes.localhost) {
			execute('sudo env') {
				allocateDefaultPTY()
			}
		}
	}
}

task executeAndStatus {
	description 'describes error handling (task may be failed)'
	doLast {
		ssh(remotes.localhost) {
			execute 'touch /root/test'
		}
	}
}

task executeAndHandleStatus {
	description 'describes error handling'
	doLast {
		def status = ssh(remotes.localhost) {
			execute 'touch /root/test'
		}
		if (status > 0) {
			logger.error "remote command returned error ${status}"
		}
	}
}

void showRemotes(Project baseProject) {
	logger.info('({}) rootProject.remotes = {}', baseProject, baseProject.parent.remotes)
	logger.info('({}) project.remotes = {}', baseProject, baseProject.remotes)
}
